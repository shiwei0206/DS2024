// int largestarea(const std::vector<int>& heights) {
//     if (heights.empty()) return 0;

//     int n = heights.size();
//     int maxArea = 0;
    
//     // 创建一个二维数组 dp
//     std::vector<std::vector<int>> dp(n, std::vector<int>(n, 0));

//     // 计算每个柱子的宽度
//     for (int i = 0; i < n; ++i) {
//         for (int j = i; j < n; ++j) {
//             // 当前的最小高度
//             int minHeight = *std::min_element(heights.begin() + i, heights.begin() + j + 1);
//             // 计算面积
//             int width = j - i + 1;
//             int area = minHeight * width;
//             maxArea = std::max(maxArea, area);
//         }
//     }

//     return maxArea;
// }


int largestarea(const std::vector<int>& heights) {
    Stack<int> st;
    int maxArea = 0;
    std::vector<int> h(heights.begin(), heights.end());
    h.push_back(0); // 添加一个高度为0的柱子，方便处理栈中剩余的柱子

    for (int i = 0; i < h.size(); ++i) {
        while (!st.empty() && h[st.top()] > h[i]) {
            int h_top = h[st.top()];
            st.pop();
            int w = st.empty() ? i : i - st.top() - 1;
            maxArea = std::max(maxArea, h_top * w);
        }
        st.push(i);
    }

    return maxArea;
}

int largestarea(const vector<int> &heights)
{
    Stack<int> st;
    int maxArea = 0;
    int n = heights.size();
    for (int i = 0; i < n; i++)
    {
        while (!st.empty() && heights[st.top()] > heights[i])
        {
            int h = heights[st.top()]; st.pop();
            int width = st.empty() ? i : i - st.top() - 1;
            maxArea =max(maxArea, h * width);
        } st.push(i);
    }
    while (!st.empty())
    {
        int h = heights[st.top()];
        st.pop();
        int width = st.empty() ? n : n - st.top() - 1;
        maxArea = max(maxArea, h * width);
    }
    return maxArea;
}